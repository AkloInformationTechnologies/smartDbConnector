// Generated by CoffeeScript 1.6.2
var OPTION, RpcRequestPayload, STATUS, WritableTrackingBuffer, typeByName, writeAllHeaders;

WritableTrackingBuffer = require('./tracking-buffer/tracking-buffer').WritableTrackingBuffer;

writeAllHeaders = require('./all-headers').writeToTrackingBuffer;

typeByName = require('./data-type').typeByName;

OPTION = {
  WITH_RECOMPILE: 0x01,
  NO_METADATA: 0x02,
  REUSE_METADATA: 0x04
};

STATUS = {
  BY_REF_VALUE: 0x01,
  DEFAULT_VALUE: 0x02
};

/*
  s2.2.6.5
*/


RpcRequestPayload = (function() {
  function RpcRequestPayload(request, txnDescriptor) {
    var buffer, optionFlags, outstandingRequestCount, parameter, statusFlags, _i, _len, _ref;

    this.request = request;
    buffer = new WritableTrackingBuffer(500);
    this.procedure = this.request.sqlTextOrProcedure;
    outstandingRequestCount = 1;
    writeAllHeaders(buffer, txnDescriptor, outstandingRequestCount);
    if (typeof this.procedure === 'string') {
      buffer.writeUsVarchar(this.procedure);
    } else {
      buffer.writeUShort(0xFFFF);
      buffer.writeUShort(this.procedure);
    }
    optionFlags = 0;
    buffer.writeUInt16LE(optionFlags);
    _ref = this.request.parameters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      parameter = _ref[_i];
      statusFlags = 0;
      if (parameter.output) {
        statusFlags |= STATUS.BY_REF_VALUE;
      }
      buffer.writeBVarchar('@' + parameter.name);
      buffer.writeUInt8(statusFlags);
      parameter.type.writeParameterData(buffer, parameter);
    }
    this.data = buffer.data;
  }

  RpcRequestPayload.prototype.toString = function(indent) {
    indent || (indent = '');
    return indent + ("RPC Request - " + this.procedure);
  };

  return RpcRequestPayload;

})();

module.exports = RpcRequestPayload;
