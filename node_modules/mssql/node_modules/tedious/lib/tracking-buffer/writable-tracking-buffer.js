// Generated by CoffeeScript 1.6.2
var WritableTrackingBuffer, buffertools;

buffertools = require('../buffertools');

/*
  A Buffer-like class that tracks position.

  As values are written, the position advances by the size of the written data.
  When writing, automatically allocates new buffers if there's not enough space.
*/


WritableTrackingBuffer = (function() {
  function WritableTrackingBuffer(sizeIncrement, encoding) {
    this.sizeIncrement = sizeIncrement;
    this.encoding = encoding;
    this.encoding || (this.encoding = 'ucs2');
    this.buffer = new Buffer(this.sizeIncrement);
    this.position = 0;
    this.__defineGetter__("data", function() {
      this.newBuffer(0);
      return this.compositeBuffer;
    });
  }

  WritableTrackingBuffer.prototype.makeRoomFor = function(requiredLength) {
    if (this.buffer.length - this.position < requiredLength) {
      return this.newBuffer(requiredLength);
    }
  };

  WritableTrackingBuffer.prototype.newBuffer = function(size) {
    var buffer;

    size || (size = this.sizeIncrement);
    buffer = this.buffer.slice(0, this.position);
    if (this.compositeBuffer) {
      this.compositeBuffer = Buffer.concat([this.compositeBuffer, buffer]);
    } else {
      this.compositeBuffer = buffer;
    }
    this.buffer = new Buffer(size);
    return this.position = 0;
  };

  WritableTrackingBuffer.prototype.writeUInt8 = function(value) {
    var length;

    length = 1;
    this.makeRoomFor(length);
    this.buffer.writeUInt8(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeUInt16LE = function(value) {
    var length;

    length = 2;
    this.makeRoomFor(length);
    this.buffer.writeUInt16LE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeUShort = function(value) {
    return this.writeUInt16LE(value);
  };

  WritableTrackingBuffer.prototype.writeUInt16BE = function(value) {
    var length;

    length = 2;
    this.makeRoomFor(length);
    this.buffer.writeUInt16BE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeUInt32LE = function(value) {
    var length;

    length = 4;
    this.makeRoomFor(length);
    this.buffer.writeUInt32LE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeUInt64LE = function(value) {
    var high, low;

    low = value % 0x100000000;
    high = Math.floor(value / 0x100000000);
    this.writeUInt32LE(low);
    return this.writeUInt32LE(high);
  };

  WritableTrackingBuffer.prototype.writeUInt32BE = function(value) {
    var length;

    length = 4;
    this.makeRoomFor(length);
    this.buffer.writeUInt32BE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeInt8 = function(value) {
    var length;

    length = 1;
    this.makeRoomFor(length);
    this.buffer.writeInt8(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeInt16LE = function(value) {
    var length;

    length = 2;
    this.makeRoomFor(length);
    this.buffer.writeInt16LE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeInt16BE = function(value) {
    var length;

    length = 2;
    this.makeRoomFor(length);
    this.buffer.writeInt16BE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeInt32LE = function(value) {
    var length;

    length = 4;
    this.makeRoomFor(length);
    this.buffer.writeInt32LE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeInt32BE = function(value) {
    var length;

    length = 4;
    this.makeRoomFor(length);
    this.buffer.writeInt32BE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeFloatLE = function(value) {
    var length;

    length = 4;
    this.makeRoomFor(length);
    this.buffer.writeFloatLE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeDoubleLE = function(value) {
    var length;

    length = 8;
    this.makeRoomFor(length);
    this.buffer.writeDoubleLE(value, this.position);
    return this.position += length;
  };

  WritableTrackingBuffer.prototype.writeString = function(value, encoding) {
    var bytesWritten, length;

    encoding || (encoding = this.encoding);
    length = Buffer.byteLength(value, encoding);
    this.makeRoomFor(length);
    bytesWritten = this.buffer.write(value, this.position, encoding);
    this.position += length;
    return bytesWritten;
  };

  WritableTrackingBuffer.prototype.writeBVarchar = function(value, encoding) {
    this.writeUInt8(value.length);
    return this.writeString(value, encoding);
  };

  WritableTrackingBuffer.prototype.writeUsVarchar = function(value, encoding) {
    this.writeUInt16LE(value.length);
    return this.writeString(value, encoding);
  };

  WritableTrackingBuffer.prototype.writeBuffer = function(value) {
    var length;

    length = value.length;
    this.makeRoomFor(length);
    value.copy(this.buffer, this.position);
    return this.position += length;
  };

  return WritableTrackingBuffer;

})();

module.exports = WritableTrackingBuffer;
