var mongo = require('mongoskin');var db = mongo.db('localhost:27017/smartReporter?auto_reconnect',{safe:true});var Systems = db.collection('systems');var Reports = db.collection('reports');var connectors = {	SQL : require("../model/sqlConnector").load(),	MYSQL: require("../model/mysqlConnector").load()}exports.load = function(){	return DbHandler();}function DbHandler(){    function setSystemsInfo(params, callback){		Systems.find().toArray(function(err, systems){			for(var i=0; i<systems.length; i++){				Global.systems[systems._id] = systems[i];			}			callback(params);		});	}		function setSystemInfo(system,reportName, dbParams,callback){		Systems.findOne({_id:system}, function (err, systemInfo) {			if(systemInfo){				//callback(systemInfo);				Global.smartReports[system] = systemInfo;				if(reportName.toUpperCase() === "SERVICES"){					Reports.find({system:system}, {name:1, _id:0}).toArray(function (err, reports) {						if(reports && reports.length > 0){							callback(reports);							}						else						{							callback({ Error: "No report/service is found in "  + system  +" system"});						}					});				}				else if(reportName.toUpperCase() === "SP"){					if(dbParams && dbParams.length > 0){						routeToDb(systemInfo,reportName.toUpperCase(), dbParams,callback);					}					else{						callback({ Error: "Please send the SP name as parameter"});					}				}				else{					Reports.findOne({name:reportName.toLowerCase(), system:system}, function (err, reportInfo) {						if(reportInfo){													//callback(reportInfo);							if(dbParams.length == 1 && typeof(dbParams[0])==="string" && dbParams[0].toUpperCase() === "PARAMS"){								if(reportInfo.type === "SP"){									callback(reportInfo.sp.params);								}								else if(reportInfo.type === "QUERY" && reportInfo.query.params){									callback(reportInfo.query.params);								}								else{									callback({ Result: "No parameter is required for "  + reportName.toLowerCase() + " service in " + system  +" system"});								}							}							else{								routeToDb(systemInfo,reportInfo, dbParams,callback);							}													}						else						{							callback({ Error: "No report/service is found as "  + reportName.toLowerCase() + " in " + system  +" system"});						}					});				}							}			else{				callback({ Error: "No system is found for " + system });			}					});	}    function routeToDb(systemInfo,reportInfo, dbParams,callback){		if(systemInfo && connectors[systemInfo.dbType]){			connectors[systemInfo.dbType].setConfig(systemInfo.config);				connectors[systemInfo.dbType].sendResult(reportInfo, dbParams,callback);		}	}    function setReportsInfo(system,params,callback){		Reports.findOne({_id:system}, function (err, reportsInfo) {			Global.smartReports[system] = reportsInfo;			callback(params);		});	}	/**	function sendSqlResult(con, callback){		sqlConnector.setConfig(con);		sqlConnector.sendSpResult(spName, params,values,callback);	}	**/	return{		sendResults: function(system, reportName, dbParams, callback){			//console.dir(Global.systems);			if(!Global.systems[system.trim().toUpperCase()]){				setSystemInfo(system,reportName, dbParams,callback);			}			else{				callback("Already contains the system info");			}					},				sendSystems:function(callback){			Systems.find({}, {name:1}).toArray(function (err, systems) {				if(systems && systems.length > 0){					callback(systems );				}				else{					callback({ Result: "No system is integrated."});				}			});		}	}}